Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-04T10:21:37+09:00

====== java ======
Created 화요일 04 9월 2018

path 설정 제어판 시스템 및 보안 시스템 고급설정 환경변

썬 마이크로시스템즈에서 1995년에 개발한 객체 지향 프로그래밍 언어.

자바** 순서**

{{~\Desktop\compile.png}}
Compiler는 javac.exe에 해당되고 Java VM은 java.exe에 해당된다.
순서대로 서술하면 다음과 같다.
  1.  소스코드(MyPrograme.java)를 작성한다.
   2. 컴파일러(Compiler)는 자바 소스코드를 이용하여 클래스 파일(MyProgram.class)을 생성한다. 컴파일 된 클래스 파일은 Java VM(Java Virtual Machine)이 인식할 수 있는 바이너리 파일이다.
   3. Java VM(JVM)은 클래스 파일의 바이너리 코드를 해석하여 프로그램을 수행한다.
   4. MyProgram 수행 결과가 컴퓨터에 반영된다.

자바파일
.java라는 확장자를 가진 파일 .class파일을 jvm만 해석가능한 바이너리코드.

**main 메소드**
메소드(method)는 함수(function)
main 메소드에는 알수없는 public, static, void, String, args[], System.out.println 등이 등장했다. 각각은 일단 가볍게 알아보면 다음과 같다.

	@public : 메소드의 접근제어자, public은 누구나 이 메소드에 접근할 수 있다는 의미
   @ static : 메소드에 static 이 지정되어 있는 경우 이 메소드는 인스턴스 생성없이 실행 할 수 있음을 의미
   @ void : 메소드의 리턴값이 없음(void: 사전적으로 "텅 빈" 이라는 뜻)을 의미
	@String : 문자열을 나타내는 자바의 자료형
	@ args[] : String 자료형에 대한 변수명으로 args 뒤에 []가 있으므로 한 개가 아닌 여러개의 값으로 이루어진 배열임을 의미
	@System.out.println : 표준출력으로 데이터를 보내는 자바의 내장 메소드로 println 메소드로 들어오는 문자열 값을 화면에 출력한다.

이클립스 버전을 사용할려면 자바 버전 호환을 확인 해야 된다.

자바는 파일 이름과 class 이름이 같아야 된다.

"Hello World" 출력

package testProject;

public class HelloWorld {
	public static void main(String args[]) {
		System.out.println("Hello World");
	}
}

main 메소드 위 같이 해야 된다.
