Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-05T10:14:37+09:00

====== 3-4.자료형 문자열(String) ======
Created 수요일 05 9월 2018

문자열이란 문장을 뜻한다. 예를 들어 다음과 같은 것들이 문자열이다.

**primitive(원시) 자료형 값**
이전에 살펴보았던 int, long, double, float, boolean, char 등을 자바는 primitive 자료형 이라고 부른다. 이런 primitive 자료형은 new 키워드로 생성할 수 없다.

primitive 자료형은 다음과 같이 리터럴(literal)로 값을 세팅할 수 있다. (※ 리터럴은 계산식 없이 소스코드에 표기하는 상수 값을 의미한다.)

boolean result = true;
char capitalC = 'C';
int i = 100000;
여기서 잠깐, String 은 "Happy Java"와 같이 리터럴로 표기가 가능하지만 primitive 자료형은 아니다. (String은 리터럴 표현식을 사용할 수 있도록 자바에서 특별 대우 해 주는 자료형이다.)

**equals**
String 참조형
equals는 두개의 문자열이 동일한 값을 가지고 있는지를 비교하여  결과값(ture/false)을 리턴한다.

예)
String a = "hello";
String b = "java";
String c = "hello";
System.out.println(a.equals(b)); // false
System.out.println(a.equals(c)); // true

문자열 a 와 문자열 b 는 "hello"와 "java"로 서로 같지 않다. 따라서 equals 메소드 호출 시 false 를 리턴한다. 문자열 a 와 문자열 c 는 "hello"와 "hello"로 서로 같다. 따라서 true 를 리턴한다.

문자열의 값을 비교할때는 반드시 equals 를 사용해야 한다. == 연산자를 사용할 경우 다음과 같은 경우가 발생할 수 있다.

String a = "hello";
String b = new String("hello");
System.out.println(a.equals(b)); // 값을 비교
System.out.println(a==b);  // 주소를 비교 참조형 데이터.
문자열 a와 b는 모두 "hello"로 같은 값이지만 equals 를 호출했을 때는 true 를 == 연산자를 이용했을 때는 false를 리턴한다. a와 b는 값은 같지만 서로 다른 객체이다. == 은 두개의 자료형이 동일한 객체인지를 판별할 때 사용하는 연산자이기 때문에 false를 리턴하게 되는 것이다.

**indexOf **
indexOf는 문자열에서 특정 문자가 시작되는 인덱스(첫번째 문자 위치값)를 리턴한다.

다음과 같은 문자열을 보자.

String a = "Hello Java";
위와 같은 a라는 문자열에서 "Java"라는 문자열이 시작되는 위치를 알고 싶은 경우에 indexOf를 다음과 같이 사용할 수 있다.

System.out.println(a.indexOf("Java"));
결과값은 다음과 같을 것이다.

6
"Hello Java" 라는 문자열에서 "Java"라는 문자열은 7번째 문자('J')부터 시작이다. 결과값이 6으로 나온 이유는 자바는 숫자를 0부터 세기 때문이다.

**replaceAll (바뀐 값을 반환)**
replaceAll은 문자열 중 특정 문자를 다른 문자로 바꾸고 싶을 경우에 사용한다.

String a = "Hello Java";
System.out.println(a.replaceAll("Java", "World"));
결과값은 다음과 같다.

Hello World
"Hello Java" 라는 문자열에서 "Java"라는 문자열이 "World"라는 문자열로 바뀌었다.

**substring**
substring은 문자열 중 특정 부분(시작위치 <= a < 끝위치)을 뽑아낼 경우에 사용한다.

다음의 예를 보자.

String a = "Hello Java";
System.out.println(a.substring(0, 4));
결과값은 다음과 같다.

Hell
위처럼 substring(시작위치, 끝위치)와 같이 사용하면 문자열의 시작위치에서 끝위치까지의 문자를 뽑아내게 된다. 단 끝위치는 포함이 안된다는 점에 주의하자. 이것은 다음과 같은 수학의 식과 비슷하다.



**toUpperCase**
toUpperCase는 문자열을 모두 대문자로 변경하고자 할 때 사용한다. (모두 소문자로 변경할때는 toLowerCase를 사용하면 된다.)

String a = "Hello Java";
System.out.println(a.toUpperCase());
결과값은 다음과 같다.

HELLO JAVA
이상과 같이 문자열에서 가장 많이 사용되는 메소드들에서 간단하게 알아보았다. 다음은 테스트를 수행했던 코드이다.

TestString.java

public class TestString {
	public static void main(String[] args) {
		String a = "Hello Java";
		System.out.println(a.indexOf("Java"));
		System.out.println(a.replaceAll("Java", "World"));
		System.out.println(a.substring(0, 4));
		System.out.println(a.toUpperCase());
	}
}
