Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-11T10:02:02+09:00

====== 7-3.정적 변수와 메소드(static) ======
Created 화요일 11 9월 2018

**static 변수**
예)
public class HousePark  {
	static String lastname = "박";

	public static void main(String[] args) {
		HousePark pey = new HousePark();
		HousePark pes = new HousePark();
	}
}
**위와 같이 lastname 변수에 static 키워드를 붙이면 자바는 메모리 할당을 딱 한번만 하게 되어 메모리 사용에 이점을 볼 수 있게된다.**

※ 만약 HousePark 클래스의 lastname값이 변경되지 않기를 바란다면 static 키워드 앞에 **final**이라는 키워드를 붙이면 된다. **final 키워드는 한번 설정되면 그 값을 변경하지 못하게 하는 기능**이 있다. 변경하려고 하면 예외가 발생한다.

static을 사용하는 또 한가지 이유로 **공유의 개념**을 들 수 있다. **static 으로 설정하면 같은 곳의 메모리 주소만을 바라보기 때문에 static 변수의 값을 공유하게 되는 것이다**. 다음의 예를 보면 더욱 명확하게 파악할 수 있을 것이다.

웹 사이트 방문시마다 조회수를 증가시키는 Counter 프로그램이 다음과 같이 있다고 가정 해 보자.
예)
public class Counter  {
	int count = 0;
	Counter() { // 생성자 초기화 진행 생성자는 객체가 만들어 질때 실행된다.
		this.count++;
		System.out.println(this.count);
	}

	public static void main(String[] args) {
		Counter c1 = new Counter();
		Counter c2 = new Counter();
	}
}
결과.
1
1
c1, c2 객체 생성시 count 값을 1씩 증가하더라도 c1과 c2의 count는 서로 다른 메모리를 가리키고 있기 때문에 원하던 결과(카운트가 증가된)가 나오지 않는 것이다. 객체변수는 항상 독립적인 값을 갖기 때문에 당연한 결과이다.
예)
public class Counter  {
	static int count = 0; // static 키워드르 붙이면 count의 객체는 count 값을 공유
	Counter() {
		this.count++;
		System.out.println(this.count);
	}

	public static void main(String[] args) {
		Counter c1 = new Counter();
		Counter c2 = new Counter();
	}
}
int count = 0 앞에 static 키워드를 붙였더니 count 값이 공유되어 다음과 같이 방문자수가 증가된 결과값이 나오게 되었다.

1
2
보통 변수의 static 키워드는 프로그래밍 시 메모리의 효율보다는 두번째 처럼 공유하기 위한 용도로 훨씬 더 많이 사용하게 된다.

**static method**
**static이라는 키워드가 메소드 앞에 붙으면 이 메소드는 스태틱 메소드(static method)가 된다. 무슨 말인지 알쏭달쏭하겠지만 예제를 보면 매우 쉽다.**

public class Counter  {
	static int count = 0;
	Counter() { //생성자 
		this.count++;
	}

	public static int getCount() {
		return count; //count는 static 변수
	}

	public static void main(String[] args) {
		Counter c1 = new Counter();
		Counter c2 = new Counter();

		System.out.println(Counter.getCount()); 
	}
}
getCount() 라는 static 메소드가 추가되었다. main 메소드에서 getCount() 메소드는 Counter.getCount() 와 같이 클래스를 통해 호출할 수 있게 된다.

※ **스태틱 메소드 안에서는 인스턴스 변수 접근이 불가능 하다. 위 예에서 count는 static 변수이기 때문에 스태틱 메소드(static method)에서 접근이 가능한 것이다.**

보통 스태틱 메소드는 **유틸리티 성 메소드를 작성할 때** 많이 사용된다. 예를 들어 "오늘의 날짜 구하기", **"숫자에 콤마 추가하기"**등의 메소드를 작성할 때에는 클래스 메소드를 사용하는 것이 유리하다.

다음은 "날짜"를 구하는 Util 클래스의 예이다.

import java.text.SimpleDateFormat;
import java.util.Date;


public class Util {
	public static String getCurrentDate(String fmt) {
		SimpleDateFormat sdf = new SimpleDateFormat(fmt);
		return sdf.format(new Date());
	}

	public static void main(String[] args) {
		System.out.println(Util.getCurrentDate("yyyyMMdd"));
	}
}
Util클래스의 getCurrentDate라는 스태틱 메소드(static method)를 이용하여 오늘의 날짜를(yyyyMMdd) 구하는 예제이다. 위 클래스를 실행하면 오늘의 날짜가 출력될 것이다.
--------------------

**싱글톤 패턴 (singleton pattern)**
디자인 패턴중 하나인 싱글톤에 대해서 알아보자. 여러분은 static 에 대한 개념이 생겼기 때문에 싱글톤을 이해하는것이 어렵지 않을 것이다.

**싱글톤은 단 하나의 객체만을 생성하게 강제하는 패턴이다.** 즉 클래스를 통해 생성할 수 있는 객체는 Only One, 즉 한 개만 되도록 만드는 것이 싱글톤이다.
예)
SingletonTest.java

class Singleton {
	private Singleton() {
	}
}

public class SingletonTest {
	public static void main(String[] args) {
		Singleton singleton = new Singleton();
	}
}
위와 같은 코드를 작성하면 **컴파일 에러가 발생**한다. 왜냐하면 **Singleton 클래스의 생성자에 private 키워드로 외부 클래스에서 Singleton 클래스의 생성자로의 접근을 막았기 때문**이다. 이렇게 생성자를 private 으로 만들어 버리면 외부 클래스에서 Singleton 클래스를 new 를 이용하여 생성할 수 없게 된다. new를 이용하여 무수히 많은 객체를 생성한다면 싱글톤의 정의에 어긋나지 않겠는가? 그래서 일단 new로 객체를 생성할 수 없도록 막은 것이다.

예)2
class Singleton {
	private Singleton() {
	}

	public static Singleton getInstance() {
		return new Singleton();
	}
}

public class SingletonTest {
	public static void main(String[] args) {
		Singleton singleton = Singleton.getInstance();
	}
}
위와 같이 코드를 변경하면 이제 **getInstance라는 static 메소드를 이용하여 Singleton 객체를 돌려 받을 수 있다. 하지만 getInstance를 호출 할 때마다 새로운 객체가 생성**되게 된다. 그렇다면 싱글톤이 아니다. 어떻게 해야 할까?

예)3
class Singleton {
	private static Singleton one;
	private Singleton() {
	}

	public static Singleton getInstance() {
		if(one==null) {
			one = new Singleton();
		}
		return one;
	}
}

public class SingletonTest {
	public static void main(String[] args) {
		Singleton singleton1 = Singleton.getInstance();
		Singleton singleton2 = Singleton.getInstance();
		System.out.println(singleton1 == singleton2);
	}
}
Singleton 클래스에 one 이라는 static 변수를 두고 getInstance 메소드에서 one 값이 null 인 경우에만 객체를 생성하도록 하여 one 객체가 단 한번만 만들어지도록 했다.

getInstance 메소드의 동작원리를 살펴보자.

최초 getInstance가 호출 되면 one이 null이므로 new에 의해서 객체가 생성이 된다. 이렇게 한번 생성이 되면 one은 static 변수이기 때문에 그 이후로는 null이 아니게 된다. 그런 후에 다시 getInstance 메소드가 호출되면 이제 one은 null이 아니므로 이미 만들어진 싱글톤 객체인 one을 항상 리턴하게 된다.

main 메소드에서 getInstance를 두번 호출하여 각각 얻은 객체가 같은 객체인지 조사 해 보았다. 역시 예상대로 "true"가 출력되어 같은 객체임을 확인 할 수 있다.

싱글톤 패턴은 static에 대한 이해만 있다면 참 알기쉬운 패턴 중 하나이다.

※ **위에서 예제로 든 싱글톤은 Thread Safe 하지는 않다. 쓰레드 환경에서도 안전한 싱글톤을 만드는 방법은 이곳에 어울리지 않으므로 생략한다.**
